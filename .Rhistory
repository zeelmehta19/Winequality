# predicting the chance of admit on the data present in test dadaset
# Import libraries
library(shiny)
library(data.table)
library(randomForest)
# Read in the RF model
model <- readRDS("modellgr.rds")
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Wine Quality Prediction'),
# Input values
sidebarPanel(
#HTML("<h3>Input parameters</h3>"),
tags$label(h3('Insert your data for prediction :)')),
numericInput("fixed_acidity",
label = "GRE Score ( Enter in range 0-10 ) ",
value = 7),
numericInput("volatile_acidity",
label = "TOEFL Score ( Enter in range 0-1 )",
value = 0.5),
numericInput("citric_acid",
label = "University Rating ( Enter in range 0-1 )",
value = 0.5),
numericInput("chlorides",
label = "SOP Rating ( Enter in range 0.00-0.10 )",
value = 0.05),
numericInput("density",
label = "LOR Rating ( Enter in range 0-1.5 )",
value = 1.0),
numericInput("pH",
label = "CGPA ( Enter in range 0-14 )",
value = 3),
numericInput("alcohol",
label = "Research ( Enter 1-20  )",
value = 10),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
PREDICTION = ''
fixed_acidity = c(input$fixed_acidity)
volatile_acidity = c(input$volatile_acidity)
citric_acid = c(input$citric_acid)
chlorides = c(input$chlorides)
density = c(input$density)
pH = c(input$pH)
alcohol = c(input$alcohol)
datas = data.frame(fixed_acidity,volatile_acidity,citric_acid,chlorides,density,pH,alcohol)
print(datas)
model <- readRDS("modellgr.rds")
result = predict(model,datas)*100
PREDICTION = paste('Your chance of getting addmission is',format(round(result, 2), nsmall = 2),'%')
Output <- data.frame(PREDICTION)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
runApp('ui.R')
library(tidyverse)
library(caret)
library(party)
library(randomForest)
library(e1071)
library(caTools)
# importing dataset
df<-read_csv("winequalityNcopy.csv")
head(df)
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 8:2
# 8 parts as training data and 2 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.8,0.2))
train <- df[splitting==1,]
test <- df[splitting==2,]
dt_fit <- ctree(quality ~ ., data = train)
#rf_fit <- randomForest(quality ~ ., data = train)
lg_fit <- glm(quality ~ ., data = train)
#nb_fit <- naiveBayes(Loan_Status ~ ., data = train)
result1 <- predict(dt_fit,newdata=test,type = "response" )
#result2 <- predict(rf_fit,newdata=test,type = "response" )
result3 <- predict(lg_fit,newdata=test,type = "response" )
#result4 <- predict(nb_fit,newdata=test,type = "response" )
r1 = ifelse(result1> 0.5 , 1, 0)
#r2 = ifelse(result2> 0.5 , 1, 0)
r3 = ifelse(result3> 0.5 , 1, 0)
#r4 = ifelse(result4> 0.5 , 1, 0)
a <- table(test$quality,r1)
#b <- table(test$quality,r2)
c <- table(test$quality,r3)
#d <- table(test$Loan_Status,r4)
print("Confusion Matrix for Decision Tree")
confusionMatrix(a)
print("Confusion Matrix for Random forest")
#confusionMatrix(b)
print("Confusion Matrix for logistic regression")
confusionMatrix(c)
#confusionMatrix(d)
saveRDS(rf_fit, "model.rds")
saveRDS(lg_fit, "modellgr.rds")
# predicting the chance of admit on the data present in test dadaset
library(tidyverse)
library(caret)
library(party)
library(randomForest)
library(e1071)
library(caTools)
# importing dataset
df<-read_csv("winequalityNcopy.csv")
head(df)
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 8:2
# 8 parts as training data and 2 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.8,0.2))
train <- df[splitting==1,]
test <- df[splitting==2,]
dt_fit <- ctree(quality ~ ., data = train)
rf_fit <- randomForest(quality ~ ., data = train)
lg_fit <- glm(quality ~ ., data = train)
nb_fit <- naiveBayes(Loan_Status ~ ., data = train)
result1 <- predict(dt_fit,newdata=test,type = "response" )
result2 <- predict(rf_fit,newdata=test,type = "response" )
result3 <- predict(lg_fit,newdata=test,type = "response" )
result4 <- predict(nb_fit,newdata=test )
r1 = ifelse(result1> 0.5 , 1, 0)
r2 = ifelse(result2> 0.5 , 1, 0)
r3 = ifelse(result3> 0.5 , 1, 0)
#r4 = ifelse(result4> 0.5 , 1, 0)
a <- table(test$quality,r1)
b <- table(test$quality,r2)
c <- table(test$quality,r3)
d <- table(quality,result4)
print("Confusion Matrix for Decision Tree")
confusionMatrix(a)
print("Confusion Matrix for Random forest")
confusionMatrix(b)
print("Confusion Matrix for logistic regression")
confusionMatrix(c)
confusionMatrix(d)
saveRDS(rf_fit, "model.rds")
saveRDS(lg_fit, "modellgr.rds")
# predicting the chance of admit on the data present in test dadaset
library(tidyverse)
library(caret)
library(party)
library(randomForest)
library(e1071)
library(caTools)
# importing dataset
df<-read_csv("winequalityNcopy.csv")
head(df)
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 8:2
# 8 parts as training data and 2 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.8,0.2))
train <- df[splitting==1,]
test <- df[splitting==2,]
dt_fit <- ctree(quality ~ ., data = train)
rf_fit <- randomForest(quality ~ ., data = train)
lg_fit <- glm(quality ~ ., data = train)
nb_fit <- naiveBayes(quality ~ ., data = train)
result1 <- predict(dt_fit,newdata=test,type = "response" )
result2 <- predict(rf_fit,newdata=test,type = "response" )
result3 <- predict(lg_fit,newdata=test,type = "response" )
result4 <- predict(nb_fit,newdata=test )
r1 = ifelse(result1> 0.5 , 1, 0)
r2 = ifelse(result2> 0.5 , 1, 0)
r3 = ifelse(result3> 0.5 , 1, 0)
#r4 = ifelse(result4> 0.5 , 1, 0)
a <- table(test$quality,r1)
b <- table(test$quality,r2)
c <- table(test$quality,r3)
d <- table(quality,result4)
print("Confusion Matrix for Decision Tree")
confusionMatrix(a)
print("Confusion Matrix for Random forest")
confusionMatrix(b)
print("Confusion Matrix for logistic regression")
confusionMatrix(c)
confusionMatrix(d)
saveRDS(rf_fit, "model.rds")
saveRDS(lg_fit, "modellgr.rds")
# predicting the chance of admit on the data present in test dadaset
library(tidyverse)
library(caret)
library(party)
library(randomForest)
library(e1071)
library(caTools)
# importing dataset
df<-read_csv("winequalityNcopy.csv")
head(df)
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 8:2
# 8 parts as training data and 2 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.8,0.2))
train <- df[splitting==1,]
test <- df[splitting==2,]
dt_fit <- ctree(quality ~ ., data = train)
rf_fit <- randomForest(quality ~ ., data = train)
lg_fit <- glm(quality ~ ., data = train)
nb_fit <- naiveBayes(quality ~ ., data = train)
result1 <- predict(dt_fit,newdata=test,type = "response" )
result2 <- predict(rf_fit,newdata=test,type = "response" )
result3 <- predict(lg_fit,newdata=test,type = "response" )
result4 <- predict(nb_fit,newdata=test )
r1 = ifelse(result1> 0.5 , 1, 0)
r2 = ifelse(result2> 0.5 , 1, 0)
r3 = ifelse(result3> 0.5 , 1, 0)
#r4 = ifelse(result4> 0.5 , 1, 0)
#saveRDS(rf_fit, "model.rds")
saveRDS(lg_fit, "modellgr.rds")
# predicting the chance of admit on the data present in test dadaset
library(tidyverse)
library(caret)
library(party)
library(randomForest)
library(e1071)
library(caTools)
# importing dataset
df<-read_csv("winequalityNcopy.csv")
head(df)
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 8:2
# 8 parts as training data and 2 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.8,0.2))
train <- df[splitting==1,]
test <- df[splitting==2,]
dt_fit <- ctree(quality ~ ., data = train)
#rf_fit <- randomForest(quality ~ ., data = train)
lg_fit <- glm(quality ~ ., data = train)
nb_fit <- naiveBayes(quality ~ ., data = train)
result1 <- predict(dt_fit,newdata=test,type = "response" )
#result2 <- predict(rf_fit,newdata=test,type = "response" )
result3 <- predict(lg_fit,newdata=test,type = "response" )
result4 <- predict(nb_fit,newdata=test )
r1 = ifelse(result1> 0.5 , 1, 0)
r2 = ifelse(result2> 0.5 , 1, 0)
r3 = ifelse(result3> 0.5 , 1, 0)
#r4 = ifelse(result4> 0.5 , 1, 0)
#saveRDS(rf_fit, "model.rds")
saveRDS(lg_fit, "modellgr.rds")
# predicting the chance of admit on the data present in test dadaset
library(tidyverse)
library(caret)
library(party)
library(randomForest)
library(e1071)
library(caTools)
# importing dataset
df<-read_csv("winequalityNcopy.csv")
head(df)
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 8:2
# 8 parts as training data and 2 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.8,0.2))
train <- df[splitting==1,]
test <- df[splitting==2,]
dt_fit <- ctree(quality ~ ., data = train)
#rf_fit <- randomForest(quality ~ ., data = train)
lg_fit <- glm(quality ~ ., data = train)
nb_fit <- naiveBayes(quality ~ ., data = train)
result1 <- predict(dt_fit,newdata=test,type = "response" )
#result2 <- predict(rf_fit,newdata=test,type = "response" )
result3 <- predict(lg_fit,newdata=test,type = "response" )
result4 <- predict(nb_fit,newdata=test )
r1 = ifelse(result1> 0.5 , 1, 0)
#r2 = ifelse(result2> 0.5 , 1, 0)
r3 = ifelse(result3> 0.5 , 1, 0)
#r4 = ifelse(result4> 0.5 , 1, 0)
#saveRDS(rf_fit, "model.rds")
saveRDS(lg_fit, "modellgr.rds")
# predicting the chance of admit on the data present in test dadaset
# Import libraries
library(shiny)
library(data.table)
library(randomForest)
# Read in the RF model
model <- readRDS("modellgr.rds")
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Wine Quality Prediction'),
# Input values
sidebarPanel(
#HTML("<h3>Input parameters</h3>"),
tags$label(h3('Insert your data for prediction :)')),
numericInput("type",
label = "Enetr 1 for red and 0 fir white ",
value = 1),
numericInput("residual sugar",
label = "GRE Score ( Enter in range 0-50 ) ",
value = 8),
numericInput("free_sulfur_dioxide",
label = "GRE Score ( Enter in range 0-100 ) ",
value = 45),
numericInput("total_sulfur_dioxide",
label = "GRE Score ( Enter in range 0-500 ) ",
value = 150),
numericInput("sulphates",
label = "GRE Score ( Enter in range 0-1 ) ",
value = 0.5),
numericInput("fixed_acidity",
label = "GRE Score ( Enter in range 0-10 ) ",
value = 7),
numericInput("volatile_acidity",
label = "TOEFL Score ( Enter in range 0-1 )",
value = 0.5),
numericInput("citric_acid",
label = "University Rating ( Enter in range 0-1 )",
value = 0.5),
numericInput("chlorides",
label = "SOP Rating ( Enter in range 0.00-0.10 )",
value = 0.05),
numericInput("density",
label = "LOR Rating ( Enter in range 0-1.5 )",
value = 1.0),
numericInput("pH",
label = "CGPA ( Enter in range 0-14 )",
value = 3),
numericInput("alcohol",
label = "Research ( Enter 1-20  )",
value = 10),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
PREDICTION = ''
fixed_acidity = c(input$fixed_acidity)
volatile_acidity = c(input$volatile_acidity)
citric_acid = c(input$citric_acid)
chlorides = c(input$chlorides)
density = c(input$density)
pH = c(input$pH)
alcohol = c(input$alcohol)
type = c(input$type)
residual_sugar = c(input$residual_sugar)
free_sulfur_dioxide = c(input$free_sulfur_dioxide)
total_sulfur_dioxide = c(input$total_sulfur_dioxide)
sulphates = c(input$sulphates)
datas = data.frame(fixed_acidity,volatile_acidity,citric_acid,chlorides,density,pH,alcohol, type, residual_sugar, free_sulfur_dioxide, total_sulfur_dioxide, sulphates)
print(datas)
model <- readRDS("modellgr.rds")
result = predict(model,datas)*100
PREDICTION = paste('Your chance of getting addmission is',format(round(result, 2), nsmall = 2),'%')
Output <- data.frame(PREDICTION)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
library(shiny); runApp('ui.R')
library(tidyverse)
library(caret)
library(party)
library(randomForest)
library(e1071)
library(caTools)
# importing dataset
df<-read_csv("winequalityNcopy.csv")
head(df)
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 8:2
# 8 parts as training data and 2 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.8,0.2))
train <- df[splitting==1,]
test <- df[splitting==2,]
dt_fit <- ctree(quality ~ ., data = train)
#rf_fit <- randomForest(quality ~ ., data = train)
lg_fit <- glm(quality ~ ., data = train)
nb_fit <- naiveBayes(quality ~ ., data = train)
result1 <- predict(dt_fit,newdata=test,type = "response" )
#result2 <- predict(rf_fit,newdata=test,type = "response" )
result3 <- predict(lg_fit,newdata=test,type = "response" )
result4 <- predict(nb_fit,newdata=test )
r1 = ifelse(result1> 0.5 , 1, 0)
#r2 = ifelse(result2> 0.5 , 1, 0)
r3 = ifelse(result3> 0.5 , 1, 0)
#r4 = ifelse(result4> 0.5 , 1, 0)
#saveRDS(rf_fit, "model.rds")
saveRDS(lg_fit, "modellgr.rds")
print(lg_fit)
# predicting the chance of admit on the data present in test dadaset
library(tidyverse)
library(caret)
library(party)
library(randomForest)
library(e1071)
library(caTools)
# importing dataset
df<-read_csv("winequalityNcopy.csv")
head(df)
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 8:2
# 8 parts as training data and 2 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.8,0.2))
train <- df[splitting==1,]
test <- df[splitting==2,]
dt_fit <- ctree(quality ~ ., data = train)
#rf_fit <- randomForest(quality ~ ., data = train)
lg_fit <- glm(quality ~ ., data = train)
nb_fit <- naiveBayes(quality ~ ., data = train)
result1 <- predict(dt_fit,newdata=test,type = "response" )
#result2 <- predict(rf_fit,newdata=test,type = "response" )
result3 <- predict(lg_fit,newdata=test,type = "response" )
result4 <- predict(nb_fit,newdata=test )
r1 = ifelse(result1> 0.5 , 1, 0)
#r2 = ifelse(result2> 0.5 , 1, 0)
r3 = ifelse(result3> 0.5 , 1, 0)
#r4 = ifelse(result4> 0.5 , 1, 0)
#saveRDS(rf_fit, "model.rds")
saveRDS(lg_fit, "modellgr.rds")
print(lg_fit)
# predicting the chance of admit on the data present in test dadaset
library(shiny); runApp('ui.R')
library(tidyverse)
library(caret)
library(party)
library(randomForest)
library(e1071)
library(caTools)
# importing dataset
df<-read_csv("winequalityNcopy.csv")
head(df)
# to view dataset -> view(df)
# to get structure of dataset -> str(df)
# splitting dataset in the ratio 8:2
# 8 parts as training data and 2 parts as testing data
splitting <- sample(2,nrow(df), replace = TRUE, prob=c(0.8,0.2))
train <- df[splitting==1,]
test <- df[splitting==2,]
dt_fit <- ctree(quality ~ ., data = train)
rf_fit <- randomForest(quality ~ ., data = train)
lg_fit <- glm(quality ~ ., data = train)
nb_fit <- naiveBayes(quality ~ ., data = train)
result1 <- predict(dt_fit,newdata=test,type = "response" )
#result2 <- predict(rf_fit,newdata=test,type = "response" )
result3 <- predict(lg_fit,newdata=test,type = "response" )
result4 <- predict(nb_fit,newdata=test )
r1 = ifelse(result1> 0.5 , 1, 0)
#r2 = ifelse(result2> 0.5 , 1, 0)
r3 = ifelse(result3> 0.5 , 1, 0)
#r4 = ifelse(result4> 0.5 , 1, 0)
saveRDS(rf_fit, "modellgr.rds")
#saveRDS(lg_fit, "modellgr.rds")
print(lg_fit)
# predicting the chance of admit on the data present in test dadaset
library(shiny); runApp('ui.R')
